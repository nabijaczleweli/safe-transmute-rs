var searchIndex = JSON.parse('{\
"safe_transmute":{"doc":"This crate contains checked implementations of…","i":[[5,"transmute_many_permissive_mut","safe_transmute","Transmute a byte slice into a sequence of values of the…",null,[[],[["result",4],["error",4]]]],[5,"transmute_many_pedantic_mut","","Transmute a byte slice into a sequence of values of the…",null,[[],[["result",4],["error",4]]]],[5,"transmute_many_permissive","","Transmute a byte slice into a sequence of values of the…",null,[[],[["error",4],["result",4]]]],[5,"transmute_many_pedantic","","Transmute a byte slice into a sequence of values of the…",null,[[],[["error",4],["result",4]]]],[5,"transmute_one_pedantic","","Transmute a byte slice into a single instance of a…",null,[[],[["triviallytransmutable",8],["error",4],["result",4]]]],[5,"transmute_many","","Transmute a byte slice into a sequence of values of the…",null,[[],[["error",4],["result",4]]]],[5,"transmute_many_mut","","Transmute a mutable byte slice into a mutable sequence of…",null,[[],[["result",4],["error",4]]]],[5,"transmute_one","","Transmute a byte slice into a single instance of a…",null,[[],[["triviallytransmutable",8],["error",4],["result",4]]]],[5,"transmute_vec","","Transform a vector into a vector of values with the given…",null,[[["vec",3],["triviallytransmutable",8]],[["result",4],["error",4],["vec",3]]]],[0,"base","","Primitives for object and array transmutation.",null,null],[5,"from_bytes","safe_transmute::base","Convert a byte slice into a single instance of a…",null,[[],[["copy",8],["error",4],["result",4]]]],[5,"from_bytes_pedantic","","Convert a byte slice into a single instance of a…",null,[[],[["copy",8],["error",4],["result",4]]]],[5,"transmute_many","","View a byte slice as a slice of an arbitrary type.",null,[[],[["error",4],["result",4]]]],[5,"transmute_many_mut","","View a mutable byte slice as a slice of an arbitrary type.",null,[[],[["result",4],["error",4]]]],[5,"transmute_many_permissive","","View a byte slice as a slice of an arbitrary type.",null,[[]]],[5,"transmute_vec","","Transform a vector into a vector of another element type.",null,[[["vec",3]],["vec",3]]],[0,"bool","safe_transmute","Functions for safe transmutation to `bool`.",null,null],[5,"bytes_are_bool","safe_transmute::bool","Makes sure that the bytes represent a sequence of valid…",null,[[]]],[5,"transmute_bool_permissive","","View a byte slice as a slice of boolean values.",null,[[],[["result",4],["error",4]]]],[5,"transmute_bool_pedantic","","View a byte slice as a slice of boolean values.",null,[[],[["result",4],["error",4]]]],[5,"transmute_bool_vec_permissive","","Trasform a byte vector into a vector of bool.",null,[[["vec",3]],[["error",4],["vec",3],["result",4]]]],[5,"transmute_bool_vec_pedantic","","Transform a byte vector into a vector of bool.",null,[[["vec",3]],[["error",4],["vec",3],["result",4]]]],[0,"util","safe_transmute","Module containing various utility functions.",null,null],[5,"designalise_f32","safe_transmute::util","If the specified 32-bit float is a signaling NaN, make it…",null,[[]]],[5,"designalise_f64","","If the specified 64-bit float is a signaling NaN, make it…",null,[[]]],[5,"from_bits_f32_designalised","","Reinterpret the given bits as a 32-bit float. If the…",null,[[]]],[5,"from_bits_f64_designalised","","Reinterpret the given bits as a 64-bit float. If the…",null,[[]]],[0,"align","safe_transmute","Alignment checking primitives.",null,null],[5,"check_alignment","safe_transmute::align","Check whether the given data slice of `S`s is properly…",null,[[],[["result",4],["unalignederror",3]]]],[5,"check_alignment_mut","","Check whether the given mutable data slice of `S`s is…",null,[[],[["result",4],["unalignederror",3]]]],[0,"error","safe_transmute","Detectable and recoverable-from transmutation precondition…",null,null],[3,"GuardError","safe_transmute::error","A slice boundary guard error, usually created by a `Guard`.",null,null],[12,"required","","The required amount of bytes for transmutation.",0,null],[12,"actual","","The actual amount of bytes.",0,null],[12,"reason","","Why this `required`/`actual`/`T` combo is an error.",0,null],[3,"UnalignedError","","Unaligned memory access error.",null,null],[12,"offset","","The required amount of bytes to discard at the front for…",1,null],[12,"source","","A slice of the original source data.",1,null],[3,"IncompatibleVecTargetError","","Incompatible vector transmutation error.",null,null],[12,"vec","","The original vector.",2,null],[4,"Error","","A transmutation error. This type describes possible errors…",null,null],[13,"Guard","","The data does not respect the target type\'s boundaries.",3,null],[13,"Unaligned","","The given data slice is not properly aligned for the…",3,null],[13,"IncompatibleVecTarget","","The data vector\'s element type does not have the same size…",3,null],[13,"InvalidValue","","The data contains an invalid value for the target type.",3,null],[4,"ErrorReason","","How the type\'s size compares to the received byte count…",null,null],[13,"NotEnoughBytes","","Too few bytes to fill even one instance of a type.",4,null],[13,"TooManyBytes","","Too many bytes to fill a type.",4,null],[13,"InexactByteCount","","The byte amount received is not the same as the type\'s size.",4,null],[11,"copy","","Reattempt the failed transmutation if the failure was…",3,[[],[["result",4],["error",4],["vec",3]]]],[11,"copy_unchecked","","Reattempt the failed non-trivial transmutation if the…",3,[[],[["result",4],["error",4],["vec",3]]]],[11,"without_src","","Create a new error which discards runtime information…",3,[[],["error",4]]],[11,"description","","Retrieve a human readable description of the reason.",4,[[]]],[11,"new","","",1,[[]]],[11,"copy_unchecked","","Create a copy of the source data, transmuted into a…",1,[[],["vec",3]]],[11,"copy","","Create a copy of the source data, transmuted into a…",1,[[],["vec",3]]],[11,"new","","Create an error with the given vector.",2,[[["vec",3]]]],[11,"copy_unchecked","","Create a copy of the data, transmuted into a new vector.…",2,[[],["vec",3]]],[11,"copy","","Create a copy of the data, transmuted into a new vector.…",2,[[],["vec",3]]],[0,"guard","safe_transmute","The `guard` module exposes an API for memory boundary…",null,null],[3,"SingleValueGuard","safe_transmute::guard","Single value guard: The byte slice must have exactly…",null,null],[3,"PedanticGuard","","Pedantic guard: The byte slice must have at least enough…",null,null],[3,"AllOrNothingGuard","","An all-or-nothing guard: The byte slice should not have…",null,null],[3,"SingleManyGuard","","A single-or-many guard: The byte slice must have at least…",null,null],[3,"PermissiveGuard","","Permissive guard: The resulting slice would have as many…",null,null],[8,"Guard","","The trait describes types which define boundary checking…",null,null],[10,"check","","Check the size of the given byte slice against a…",5,[[],[["result",4],["guarderror",3]]]],[0,"trivial","safe_transmute","Transmutation of trivial objects",null,null],[5,"align_to","safe_transmute::trivial","Transmute the slice to a slice of another type, ensuring…",null,[[]]],[5,"align_to_mut","","Transmute the slice to a slice of another type, ensuring…",null,[[]]],[5,"transmute_trivial","","Transmute a byte slice into a single instance of a…",null,[[],[["triviallytransmutable",8],["error",4],["result",4]]]],[5,"transmute_trivial_pedantic","","Transmute a byte slice into a single instance of a…",null,[[],[["triviallytransmutable",8],["error",4],["result",4]]]],[5,"transmute_trivial_many","","Transmute a byte slice into a single instance of a…",null,[[],[["error",4],["result",4]]]],[5,"transmute_trivial_many_mut","","Transmute a byte slice into a single instance of a…",null,[[],[["result",4],["error",4]]]],[5,"guarded_transmute_pod_many_permissive","","View a byte slice as a slice of a trivially transmutable…",null,[[],[["error",4],["result",4]]]],[5,"guarded_transmute_pod_many_pedantic","","View a byte slice as a slice of a trivially transmutable…",null,[[],[["error",4],["result",4]]]],[5,"transmute_trivial_vec","","Transform a vector into a vector of another element type.",null,[[["vec",3],["triviallytransmutable",8]],[["triviallytransmutable",8],["vec",3]]]],[8,"TriviallyTransmutable","","Type that can be constructed from any combination of bytes.",null,null],[0,"to_bytes","safe_transmute","Functions for transmutation from a concrete type to bytes.",null,null],[5,"transmute_to_bytes_unchecked","safe_transmute::to_bytes","Transmute a single instance of an arbitrary type into a…",null,[[]]],[5,"transmute_to_bytes_unchecked_mut","","Transmute a single mutable instance of an arbitrary type…",null,[[]]],[5,"transmute_to_bytes_many_unchecked","","Transmute a slice of arbitrary types into a slice of their…",null,[[]]],[5,"transmute_to_bytes_many_unchecked_mut","","Transmute a mutable slice of arbitrary types into a…",null,[[]]],[5,"transmute_one_to_bytes","","Transmute a single instance of a trivially transmutable…",null,[[]]],[5,"transmute_one_to_bytes_mut","","Transmute a single instance of a trivially transmutable…",null,[[]]],[5,"transmute_to_bytes","","Transmute a slice of arbitrary types into a slice of their…",null,[[]]],[5,"transmute_to_bytes_mut","","Transmute a mutable slice of a trivially transmutable type…",null,[[]]],[5,"guarded_transmute_to_bytes_pod_many","","Transmute a slice of arbitrary types into a slice of their…",null,[[]]],[5,"transmute_to_bytes_vec","","Transmute a vector of elements of an arbitrary type into a…",null,[[["vec",3],["triviallytransmutable",8]],[["vec",3],["result",4],["error",4]]]],[0,"migration","safe_transmute","Migration guides.",null,null],[0,"v0_11","safe_transmute::migration","Migrating to `safe-transmute` v0.11",null,null],[14,"try_copy","safe_transmute","Retrieve the result of a transmutation, copying the data…",null,null],[14,"try_copy_unchecked","","Retrieve the result of a non-trivial transmutation,…",null,null],[11,"from","safe_transmute::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","safe_transmute::guard","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"check","","",6,[[],[["result",4],["guarderror",3]]]],[11,"check","","",7,[[],[["result",4],["guarderror",3]]]],[11,"check","","",8,[[],[["result",4],["guarderror",3]]]],[11,"check","","",9,[[],[["result",4],["guarderror",3]]]],[11,"check","","",10,[[],[["result",4],["guarderror",3]]]],[11,"from","safe_transmute::error","",3,[[["guarderror",3]]]],[11,"from","","",3,[[["unalignederror",3]]]],[11,"from","","",3,[[["incompatiblevectargeterror",3]]]],[11,"clone","","",3,[[],["error",4]]],[11,"clone","","",0,[[],["guarderror",3]]],[11,"clone","","",4,[[],["errorreason",4]]],[11,"clone","","",1,[[],["unalignederror",3]]],[11,"clone","","",2,[[],["incompatiblevectargeterror",3]]],[11,"eq","","",3,[[["error",4]]]],[11,"ne","","",3,[[["error",4]]]],[11,"eq","","",0,[[["guarderror",3]]]],[11,"ne","","",0,[[["guarderror",3]]]],[11,"eq","","",4,[[["errorreason",4]]]],[11,"eq","","",1,[[["unalignederror",3]]]],[11,"ne","","",1,[[["unalignederror",3]]]],[11,"eq","","",2,[[["incompatiblevectargeterror",3]]]],[11,"ne","","",2,[[["incompatiblevectargeterror",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","","",3,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"description","","",3,[[]]],[11,"description","","",0,[[]]],[11,"description","","",1,[[]]],[11,"description","","",2,[[]]]],"p":[[3,"GuardError"],[3,"UnalignedError"],[3,"IncompatibleVecTargetError"],[4,"Error"],[4,"ErrorReason"],[8,"Guard"],[3,"SingleValueGuard"],[3,"PedanticGuard"],[3,"AllOrNothingGuard"],[3,"SingleManyGuard"],[3,"PermissiveGuard"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);