var searchIndex = JSON.parse('{\
"safe_transmute":{"doc":"This crate contains checked implementations of …","t":[0,5,5,5,5,5,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,0,4,13,13,13,13,11,11,11,3,12,12,12,4,13,13,13,11,3,12,12,11,11,11,3,12,11,11,11,0,8,10,3,3,3,3,3,0,8,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,5,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["base","from_bytes","from_bytes_pedantic","transmute_many","transmute_many_mut","transmute_many_permissive","transmute_vec","bool","bytes_are_bool","transmute_bool_permissive","transmute_bool_pedantic","transmute_bool_vec_permissive","transmute_bool_vec_pedantic","util","designalise_f32","designalise_f64","from_bits_f32_designalised","from_bits_f64_designalised","align","check_alignment","check_alignment_mut","error","Error","Guard","Unaligned","IncompatibleVecTarget","InvalidValue","copy","copy_unchecked","without_src","GuardError","required","actual","reason","ErrorReason","NotEnoughBytes","TooManyBytes","InexactByteCount","description","UnalignedError","offset","source","new","copy_unchecked","copy","IncompatibleVecTargetError","vec","new","copy_unchecked","copy","guard","Guard","check","SingleValueGuard","PedanticGuard","AllOrNothingGuard","SingleManyGuard","PermissiveGuard","trivial","TriviallyTransmutable","align_to","align_to_mut","transmute_trivial","transmute_trivial_pedantic","transmute_trivial_many","transmute_trivial_many_mut","guarded_transmute_pod_many_permissive","guarded_transmute_pod_many_pedantic","transmute_trivial_vec","to_bytes","transmute_to_bytes_unchecked","transmute_to_bytes_unchecked_mut","transmute_to_bytes_many_unchecked","transmute_to_bytes_many_unchecked_mut","transmute_one_to_bytes","transmute_one_to_bytes_mut","transmute_to_bytes","transmute_to_bytes_mut","guarded_transmute_to_bytes_pod_many","transmute_to_bytes_vec","migration","v0_11","transmute_many_permissive_mut","transmute_many_pedantic_mut","transmute_many_permissive","transmute_many_pedantic","transmute_one_pedantic","transmute_many","transmute_many_mut","transmute_one","transmute_vec","try_copy","try_copy_unchecked","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","check","check","check","check","check","from","from","from","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","description","description","description","description"],"q":["safe_transmute","safe_transmute::base","","","","","","safe_transmute","safe_transmute::bool","","","","","safe_transmute","safe_transmute::util","","","","safe_transmute","safe_transmute::align","","safe_transmute","safe_transmute::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","safe_transmute","safe_transmute::guard","","","","","","","safe_transmute","safe_transmute::trivial","","","","","","","","","","safe_transmute","safe_transmute::to_bytes","","","","","","","","","","safe_transmute","safe_transmute::migration","safe_transmute","","","","","","","","","","","safe_transmute::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","safe_transmute::guard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","safe_transmute::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Primitives for object and array transmutation.","Convert a byte slice into a single instance of a <code>Copy</code>able …","Convert a byte slice into a single instance of a <code>Copy</code>able …","View a byte slice as a slice of an arbitrary type.","View a mutable byte slice as a slice of an arbitrary type.","View a byte slice as a slice of an arbitrary type.","Transform a vector into a vector of another element type.","Functions for safe transmutation to <code>bool</code>.","Makes sure that the bytes represent a sequence of valid …","View a byte slice as a slice of boolean values.","View a byte slice as a slice of boolean values.","Trasform a byte vector into a vector of bool.","Transform a byte vector into a vector of bool.","Module containing various utility functions.","If the specified 32-bit float is a signaling NaN, make it …","If the specified 64-bit float is a signaling NaN, make it …","Reinterpret the given bits as a 32-bit float. If the …","Reinterpret the given bits as a 64-bit float. If the …","Alignment checking primitives.","Check whether the given data slice of <code>S</code>s is properly …","Check whether the given mutable data slice of <code>S</code>s is …","Detectable and recoverable-from transmutation …","A transmutation error. This type describes possible …","The data does not respect the target type’s boundaries.","The given data slice is not properly aligned for the …","The data vector’s element type does not have the same …","The data contains an invalid value for the target type.","Reattempt the failed transmutation if the failure was …","Reattempt the failed non-trivial transmutation if the …","Create a new error which discards runtime information …","A slice boundary guard error, usually created by a <code>Guard</code>.","The required amount of bytes for transmutation.","The actual amount of bytes.","Why this <code>required</code>/<code>actual</code>/<code>T</code> combo is an error.","How the type’s size compares to the received byte count …","Too few bytes to fill even one instance of a type.","Too many bytes to fill a type.","The byte amount received is not the same as the type’s …","Retrieve a human readable description of the reason.","Unaligned memory access error.","The required amount of bytes to discard at the front for …","A slice of the original source data.","","Create a copy of the source data, transmuted into a …","Create a copy of the source data, transmuted into a …","Incompatible vector transmutation error.","The original vector.","Create an error with the given vector.","Create a copy of the data, transmuted into a new vector. …","Create a copy of the data, transmuted into a new vector. …","The <code>guard</code> module exposes an API for memory boundary …","The trait describes types which define boundary checking …","Check the size of the given byte slice against a …","Single value guard: The byte slice must have exactly …","Pedantic guard: The byte slice must have at least enough …","An all-or-nothing guard: The byte slice should not have …","A single-or-many guard: The byte slice must have at least …","Permissive guard: The resulting slice would have as many …","Transmutation of trivial objects","Type that can be constructed from any combination of …","Transmute the slice to a slice of another type, ensuring …","Transmute the slice to a slice of another type, ensuring …","Transmute a byte slice into a single instance of a …","Transmute a byte slice into a single instance of a …","Transmute a byte slice into a single instance of a …","Transmute a byte slice into a single instance of a …","View a byte slice as a slice of a trivially transmutable …","View a byte slice as a slice of a trivially transmutable …","Transform a vector into a vector of another element type.","Functions for transmutation <em>from</em> a concrete type <em>to</em> bytes.","Transmute a single instance of an arbitrary type into a …","Transmute a single mutable instance of an arbitrary type …","Transmute a slice of arbitrary types into a slice of …","Transmute a mutable slice of arbitrary types into a …","Transmute a single instance of a trivially transmutable …","Transmute a single instance of a trivially transmutable …","Transmute a slice of arbitrary types into a slice of …","Transmute a mutable slice of a trivially transmutable …","Transmute a slice of arbitrary types into a slice of …","Transmute a vector of elements of an arbitrary type into …","Migration guides.","Migrating to <code>safe-transmute</code> v0.11","Transmute a byte slice into a sequence of values of the …","Transmute a byte slice into a sequence of values of the …","Transmute a byte slice into a sequence of values of the …","Transmute a byte slice into a sequence of values of the …","Transmute a byte slice into a single instance of a …","Transmute a byte slice into a sequence of values of the …","Transmute a mutable byte slice into a mutable sequence of …","Transmute a byte slice into a single instance of a …","Transform a vector into a vector of values with the given …","Retrieve the result of a transmutation, copying the data …","Retrieve the result of a non-trivial transmutation, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,2,2,2,0,3,3,3,3,0,4,4,4,4,4,0,5,5,5,5,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,7,8,9,10,11,1,1,1,1,2,3,4,5,1,1,2,2,3,4,4,5,5,1,2,3,4,5,1,2,4,5,1,2,3,4,5,1,2,4,5],"f":[null,[[],[["result",4],["copy",8],["error",4]]],[[],[["result",4],["copy",8],["error",4]]],[[],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[]],[[["vec",3]],["vec",3]],null,[[],["bool",15]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[["vec",3],["u8",15]],[["error",4],["vec",3],["result",4]]],[[["vec",3],["u8",15]],[["error",4],["vec",3],["result",4]]],null,[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["u32",15]],["f32",15]],[[["u64",15]],["f64",15]],null,[[],[["result",4],["unalignederror",3]]],[[],[["result",4],["unalignederror",3]]],null,null,null,null,null,null,[[],[["vec",3],["error",4],["result",4]]],[[],[["vec",3],["error",4],["result",4]]],[[],["error",4]],null,null,null,null,null,null,null,null,[[],["str",15]],null,null,null,[[["usize",15]]],[[],["vec",3]],[[],["vec",3]],null,null,[[["vec",3]]],[[],["vec",3]],[[],["vec",3]],null,null,[[],[["guarderror",3],["result",4]]],null,null,null,null,null,null,null,[[]],[[]],[[],[["result",4],["triviallytransmutable",8],["error",4]]],[[],[["result",4],["triviallytransmutable",8],["error",4]]],[[],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["error",4],["result",4]]],[[],[["error",4],["result",4]]],[[["vec",3],["triviallytransmutable",8]],[["vec",3],["triviallytransmutable",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["triviallytransmutable",8]],[["vec",3],["error",4],["result",4]]],null,null,[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["error",4],["result",4]]],[[],[["error",4],["result",4]]],[[],[["result",4],["triviallytransmutable",8],["error",4]]],[[],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["triviallytransmutable",8],["error",4]]],[[["vec",3],["triviallytransmutable",8]],[["vec",3],["result",4],["error",4]]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["guarderror",3],["result",4]]],[[],[["guarderror",3],["result",4]]],[[],[["guarderror",3],["result",4]]],[[],[["guarderror",3],["result",4]]],[[],[["guarderror",3],["result",4]]],[[["guarderror",3]]],[[["unalignederror",3]]],[[["incompatiblevectargeterror",3]]],[[],["error",4]],[[],["guarderror",3]],[[],["errorreason",4]],[[],["unalignederror",3]],[[],["incompatiblevectargeterror",3]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["guarderror",3]],["bool",15]],[[["guarderror",3]],["bool",15]],[[["errorreason",4]],["bool",15]],[[["unalignederror",3]],["bool",15]],[[["unalignederror",3]],["bool",15]],[[["incompatiblevectargeterror",3]],["bool",15]],[[["incompatiblevectargeterror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]]],"p":[[4,"Error"],[3,"GuardError"],[4,"ErrorReason"],[3,"UnalignedError"],[3,"IncompatibleVecTargetError"],[8,"Guard"],[3,"SingleValueGuard"],[3,"PedanticGuard"],[3,"AllOrNothingGuard"],[3,"SingleManyGuard"],[3,"PermissiveGuard"]]}\
}');
initSearch(searchIndex);